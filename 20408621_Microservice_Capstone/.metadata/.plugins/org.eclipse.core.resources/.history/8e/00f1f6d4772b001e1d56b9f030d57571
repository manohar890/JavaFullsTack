package com.shopping.controller;


import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.shopping.DemoModels.Cart;
import com.shopping.DemoModels.Customer;
import com.shopping.DemoModels.CustomerAndOrderMapping;
import com.shopping.DemoModels.Inventory;
import com.shopping.DemoModels.Lineitem;
import com.shopping.DemoModels.ListOrders;
import com.shopping.DemoModels.Orders;
import com.shopping.DemoModels.Product;
import com.shopping.ServiceCommunication.CartService;
import com.shopping.ServiceCommunication.CustomerService;
import com.shopping.ServiceCommunication.InventoryService;
import com.shopping.ServiceCommunication.MapRepository;
import com.shopping.ServiceCommunication.OrderService;
import com.shopping.ServiceCommunication.ProductService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;

@RestController
@RequestMapping("/api/shoppingservice")
public class ShoppingController {

	@Autowired 
	ProductService prod;
	
	@Autowired
	InventoryService in;
	
	@Autowired
	CustomerService cs;
	
	@Autowired
	CartService cars;
	
	@Autowired
	MapRepository mr;
	
	@Autowired
	OrderService os;
	
	int atmpt=0;
	
	
	//@Retry(name="ShoppingService",fallbackMethod = "fallbackmethod")
	@CircuitBreaker(name="ShoppingService", fallbackMethod = "fallbackmethod")
	@PostMapping("/products")
	public ResponseEntity<?> addingProductAndInventory(@RequestBody Product product) {
		System.out.println(++atmpt);
		Inventory inm=new Inventory();
		inm.setQuantity(product.getQuantity());
		in.addInventory(inm);
		return prod.addProduct(product);
	}
	@Retry(name="ShoppingService",fallbackMethod = "fallbackmethod")
	@PostMapping("/customer")
	public ResponseEntity<?> addCustomer(@RequestBody Customer cus) {
		Cart c = new Cart();
		c.setCartId(cus.getCustomerId());
		cars.addCart(c);
		return cs.addCustomer(cus);
	}
	@Retry(name="ShoppingService",fallbackMethod = "fallbackmethod")
	@PutMapping("/customer/{id}/cart")
	public ResponseEntity<?> addItemstoCart(@RequestBody Cart cart,@PathVariable("id") int id) {
		cart.setCartId(id);
		return cars.UpdateCarts(cart, id);	
	}
	@CircuitBreaker(name="ShoppingService", fallbackMethod = "fallbackmethod")
     //@Retry(name="ShoppingService",fallbackMethod = "fallbackmethod")
	@PostMapping("/customer/{id}/order")
	public ResponseEntity<?> addOrder(@PathVariable("id") int id) {
		if(cs.searchCustomer(id).getBody().isPresent()) {
			List<Lineitem> lis=cars.getAll(id);
			if(!lis.isEmpty()) {
				CustomerAndOrderMapping comp=new CustomerAndOrderMapping();
				comp.setCustomerId(id);
				mr.save(comp);
			Orders or = new Orders();
			or.setListitem(lis);
			Cart c= new Cart();
			c.setCartId(id);
			c.setListitem(lis);
		cars.updateCart(c, id);
			for(Lineitem li:lis) {
				int p=li.getProductId();
				int q=li.getQuantity();
				Inventory ins=in.getInventory(p);
				ins.setQuantity(ins.getQuantity()-q);
				in.updateInventory(ins, ins.getInventoryId());
			}
			return os.addOrder(or);
			}
			return new ResponseEntity<>("Order not placed cart is empty",HttpStatus.NOT_ACCEPTABLE);
		}else {
			return new ResponseEntity<>("Customer Not found",HttpStatus.NOT_FOUND);
		}
	}
	@Retry(name="ShoppingService",fallbackMethod = "fallbackmethod")
	@GetMapping("/customer/{id}/orders")
	public ResponseEntity<?> getAllOrders(@PathVariable int id){
		Optional<Customer> cur=cs.searchCustomer(id).getBody();
		if(cur.isPresent()) {
		List<Integer> lis=mr.findallIds(id);
		lis.stream().forEach(System.out::println);
		ListOrders m=new ListOrders();
		m.setCustomerDetails(cur.get());
		m.setOrders(os.findOrders(lis));
		return new ResponseEntity<>(m,HttpStatus.OK);
	}else {
		return new ResponseEntity<>("Customer not found",HttpStatus.NOT_FOUND);
	}
	}
	
	public ResponseEntity<?> fallbackmethod(Exception e) {
		
		return new ResponseEntity<>("Server Busy try again",HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
}
